
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: thesis_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-thesis_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - thesis_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-thesis_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: thesis_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - thesis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: thesis_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - thesis_network

  # Backend Spring Boot Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: thesis_backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-thesis_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET_DATASETS: ${MINIO_BUCKET_DATASETS:-datasets}
      MINIO_BUCKET_ALGORITHMS: ${MINIO_BUCKET_ALGORITHMS:-algorithms}
      MINIO_BUCKET_MODELS: ${MINIO_BUCKET_MODELS:-models}
      MINIO_BUCKET_PREDICTIONS: ${MINIO_BUCKET_PREDICTIONS:-predictions}
      MINIO_BUCKET_PREDICTION_RESULTS: ${MINIO_BUCKET_PREDICTION_RESULTS:-prediction-results}
      MINIO_BUCKET_METRICS: ${MINIO_BUCKET_METRICS:-metrics}
      MINIO_BUCKET_PARAMETERS: ${MINIO_BUCKET_PARAMETERS:-parameters}
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - ~/.m2:/root/.m2
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - thesis_network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      mailhog:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend Vite Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: thesis_frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://backend:8080
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - thesis_network
    depends_on:
      backend:
        condition: service_healthy
    stdin_open: true
    tty: true

networks:
  thesis_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local